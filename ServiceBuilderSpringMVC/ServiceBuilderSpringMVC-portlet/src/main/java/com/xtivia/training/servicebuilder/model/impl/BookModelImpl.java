package com.xtivia.training.servicebuilder.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.xtivia.training.servicebuilder.model.Book;
import com.xtivia.training.servicebuilder.model.BookModel;
import com.xtivia.training.servicebuilder.model.BookSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.List;

/**
 * The base model implementation for the Book service. Represents a row in the &quot;Book_Book&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.xtivia.training.servicebuilder.model.BookModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BookImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see BookImpl
 * @see com.xtivia.training.servicebuilder.model.Book
 * @see com.xtivia.training.servicebuilder.model.BookModel
 * @generated
 */
@JSON(strict = true)
public class BookModelImpl extends BaseModelImpl<Book> implements BookModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a book model instance should use the {@link com.xtivia.training.servicebuilder.model.Book} interface instead.
     */
    public static final String TABLE_NAME = "Book_Book";
    public static final Object[][] TABLE_COLUMNS = {
            { "uuid_", Types.VARCHAR },
            { "id_", Types.BIGINT },
            { "name", Types.VARCHAR },
            { "isbn", Types.BIGINT },
            { "author", Types.VARCHAR },
            { "summary", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table Book_Book (uuid_ VARCHAR(75) null,id_ LONG not null primary key,name VARCHAR(75) null,isbn LONG,author VARCHAR(75) null,summary VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table Book_Book";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.xtivia.training.servicebuilder.model.Book"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.xtivia.training.servicebuilder.model.Book"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.xtivia.training.servicebuilder.model.Book"),
            true);
    public static long UUID_COLUMN_BITMASK = 1L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.xtivia.training.servicebuilder.model.Book"));
    private static ClassLoader _classLoader = Book.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            Book.class
        };
    private String _uuid;
    private String _originalUuid;
    private long _id;
    private String _name;
    private long _isbn;
    private String _author;
    private String _summary;
    private transient ExpandoBridge _expandoBridge;
    private long _columnBitmask;
    private Book _escapedModelProxy;

    public BookModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Book toModel(BookSoap soapModel) {
        Book model = new BookImpl();

        model.setUuid(soapModel.getUuid());
        model.setId(soapModel.getId());
        model.setName(soapModel.getName());
        model.setIsbn(soapModel.getIsbn());
        model.setAuthor(soapModel.getAuthor());
        model.setSummary(soapModel.getSummary());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Book> toModels(BookSoap[] soapModels) {
        List<Book> models = new ArrayList<Book>(soapModels.length);

        for (BookSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    public long getPrimaryKey() {
        return _id;
    }

    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_id);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return Book.class;
    }

    public String getModelClassName() {
        return Book.class.getName();
    }

    @JSON
    public String getUuid() {
        if (_uuid == null) {
            return StringPool.BLANK;
        } else {
            return _uuid;
        }
    }

    public void setUuid(String uuid) {
        if (_originalUuid == null) {
            _originalUuid = _uuid;
        }

        _uuid = uuid;
    }

    public String getOriginalUuid() {
        return GetterUtil.getString(_originalUuid);
    }

    @JSON
    public long getId() {
        return _id;
    }

    public void setId(long id) {
        _id = id;
    }

    @JSON
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    public void setName(String name) {
        _name = name;
    }

    @JSON
    public long getIsbn() {
        return _isbn;
    }

    public void setIsbn(long isbn) {
        _isbn = isbn;
    }

    @JSON
    public String getAuthor() {
        if (_author == null) {
            return StringPool.BLANK;
        } else {
            return _author;
        }
    }

    public void setAuthor(String author) {
        _author = author;
    }

    @JSON
    public String getSummary() {
        if (_summary == null) {
            return StringPool.BLANK;
        } else {
            return _summary;
        }
    }

    public void setSummary(String summary) {
        _summary = summary;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public Book toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (Book) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        if (_expandoBridge == null) {
            _expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
                    Book.class.getName(), getPrimaryKey());
        }

        return _expandoBridge;
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        getExpandoBridge().setAttributes(serviceContext);
    }

    @Override
    public Object clone() {
        BookImpl bookImpl = new BookImpl();

        bookImpl.setUuid(getUuid());
        bookImpl.setId(getId());
        bookImpl.setName(getName());
        bookImpl.setIsbn(getIsbn());
        bookImpl.setAuthor(getAuthor());
        bookImpl.setSummary(getSummary());

        bookImpl.resetOriginalValues();

        return bookImpl;
    }

    public int compareTo(Book book) {
        long primaryKey = book.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        Book book = null;

        try {
            book = (Book) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        long primaryKey = book.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        BookModelImpl bookModelImpl = this;

        bookModelImpl._originalUuid = bookModelImpl._uuid;

        bookModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Book> toCacheModel() {
        BookCacheModel bookCacheModel = new BookCacheModel();

        bookCacheModel.uuid = getUuid();

        String uuid = bookCacheModel.uuid;

        if ((uuid != null) && (uuid.length() == 0)) {
            bookCacheModel.uuid = null;
        }

        bookCacheModel.id = getId();

        bookCacheModel.name = getName();

        String name = bookCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            bookCacheModel.name = null;
        }

        bookCacheModel.isbn = getIsbn();

        bookCacheModel.author = getAuthor();

        String author = bookCacheModel.author;

        if ((author != null) && (author.length() == 0)) {
            bookCacheModel.author = null;
        }

        bookCacheModel.summary = getSummary();

        String summary = bookCacheModel.summary;

        if ((summary != null) && (summary.length() == 0)) {
            bookCacheModel.summary = null;
        }

        return bookCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(13);

        sb.append("{uuid=");
        sb.append(getUuid());
        sb.append(", id=");
        sb.append(getId());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", isbn=");
        sb.append(getIsbn());
        sb.append(", author=");
        sb.append(getAuthor());
        sb.append(", summary=");
        sb.append(getSummary());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(22);

        sb.append("<model><model-name>");
        sb.append("com.xtivia.training.servicebuilder.model.Book");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>uuid</column-name><column-value><![CDATA[");
        sb.append(getUuid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>isbn</column-name><column-value><![CDATA[");
        sb.append(getIsbn());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>author</column-name><column-value><![CDATA[");
        sb.append(getAuthor());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>summary</column-name><column-value><![CDATA[");
        sb.append(getSummary());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
