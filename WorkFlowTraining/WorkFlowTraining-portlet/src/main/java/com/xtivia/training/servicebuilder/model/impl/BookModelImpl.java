package com.xtivia.training.servicebuilder.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.workflow.WorkflowConstants;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.xtivia.training.servicebuilder.model.Book;
import com.xtivia.training.servicebuilder.model.BookModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;

/**
 * The base model implementation for the Book service. Represents a row in the &quot;BookFlow_Book&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.xtivia.training.servicebuilder.model.BookModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BookImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see BookImpl
 * @see com.xtivia.training.servicebuilder.model.Book
 * @see com.xtivia.training.servicebuilder.model.BookModel
 * @generated
 */
public class BookModelImpl extends BaseModelImpl<Book> implements BookModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a book model instance should use the {@link com.xtivia.training.servicebuilder.model.Book} interface instead.
     */
    public static final String TABLE_NAME = "BookFlow_Book";
    public static final Object[][] TABLE_COLUMNS = {
            { "uuid_", Types.VARCHAR },
            { "id_", Types.BIGINT },
            { "name", Types.VARCHAR },
            { "isbn", Types.BIGINT },
            { "author", Types.VARCHAR },
            { "summary", Types.VARCHAR },
            { "status", Types.INTEGER },
            { "statusByUserId", Types.BIGINT },
            { "statusByUserName", Types.VARCHAR },
            { "statusDate", Types.TIMESTAMP },
            { "companyId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "userId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table BookFlow_Book (uuid_ VARCHAR(75) null,id_ LONG not null primary key,name VARCHAR(75) null,isbn LONG,author VARCHAR(75) null,summary VARCHAR(75) null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,companyId LONG,groupId LONG,userId LONG)";
    public static final String TABLE_SQL_DROP = "drop table BookFlow_Book";
    public static final String ORDER_BY_JPQL = " ORDER BY book.name ASC, book.author DESC";
    public static final String ORDER_BY_SQL = " ORDER BY BookFlow_Book.name ASC, BookFlow_Book.author DESC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.xtivia.training.servicebuilder.model.Book"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.xtivia.training.servicebuilder.model.Book"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.xtivia.training.servicebuilder.model.Book"),
            true);
    public static long GROUPID_COLUMN_BITMASK = 1L;
    public static long ISBN_COLUMN_BITMASK = 2L;
    public static long UUID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.xtivia.training.servicebuilder.model.Book"));
    private static ClassLoader _classLoader = Book.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            Book.class
        };
    private String _uuid;
    private String _originalUuid;
    private long _id;
    private String _name;
    private long _isbn;
    private long _originalIsbn;
    private boolean _setOriginalIsbn;
    private String _author;
    private String _summary;
    private int _status;
    private long _statusByUserId;
    private String _statusByUserUuid;
    private String _statusByUserName;
    private Date _statusDate;
    private long _companyId;
    private long _groupId;
    private long _originalGroupId;
    private boolean _setOriginalGroupId;
    private long _userId;
    private String _userUuid;
    private transient ExpandoBridge _expandoBridge;
    private long _columnBitmask;
    private Book _escapedModelProxy;

    public BookModelImpl() {
    }

    public long getPrimaryKey() {
        return _id;
    }

    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_id);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return Book.class;
    }

    public String getModelClassName() {
        return Book.class.getName();
    }

    public String getUuid() {
        if (_uuid == null) {
            return StringPool.BLANK;
        } else {
            return _uuid;
        }
    }

    public void setUuid(String uuid) {
        if (_originalUuid == null) {
            _originalUuid = _uuid;
        }

        _uuid = uuid;
    }

    public String getOriginalUuid() {
        return GetterUtil.getString(_originalUuid);
    }

    public long getId() {
        return _id;
    }

    public void setId(long id) {
        _id = id;
    }

    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    public void setName(String name) {
        _columnBitmask = -1L;

        _name = name;
    }

    public long getIsbn() {
        return _isbn;
    }

    public void setIsbn(long isbn) {
        _columnBitmask |= ISBN_COLUMN_BITMASK;

        if (!_setOriginalIsbn) {
            _setOriginalIsbn = true;

            _originalIsbn = _isbn;
        }

        _isbn = isbn;
    }

    public long getOriginalIsbn() {
        return _originalIsbn;
    }

    public String getAuthor() {
        if (_author == null) {
            return StringPool.BLANK;
        } else {
            return _author;
        }
    }

    public void setAuthor(String author) {
        _columnBitmask = -1L;

        _author = author;
    }

    public String getSummary() {
        if (_summary == null) {
            return StringPool.BLANK;
        } else {
            return _summary;
        }
    }

    public void setSummary(String summary) {
        _summary = summary;
    }

    public int getStatus() {
        return _status;
    }

    public void setStatus(int status) {
        _status = status;
    }

    public long getStatusByUserId() {
        return _statusByUserId;
    }

    public void setStatusByUserId(long statusByUserId) {
        _statusByUserId = statusByUserId;
    }

    public String getStatusByUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getStatusByUserId(), "uuid",
            _statusByUserUuid);
    }

    public void setStatusByUserUuid(String statusByUserUuid) {
        _statusByUserUuid = statusByUserUuid;
    }

    public String getStatusByUserName() {
        if (_statusByUserName == null) {
            return StringPool.BLANK;
        } else {
            return _statusByUserName;
        }
    }

    public void setStatusByUserName(String statusByUserName) {
        _statusByUserName = statusByUserName;
    }

    public Date getStatusDate() {
        return _statusDate;
    }

    public void setStatusDate(Date statusDate) {
        _statusDate = statusDate;
    }

    public long getCompanyId() {
        return _companyId;
    }

    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    public long getGroupId() {
        return _groupId;
    }

    public void setGroupId(long groupId) {
        _columnBitmask |= GROUPID_COLUMN_BITMASK;

        if (!_setOriginalGroupId) {
            _setOriginalGroupId = true;

            _originalGroupId = _groupId;
        }

        _groupId = groupId;
    }

    public long getOriginalGroupId() {
        return _originalGroupId;
    }

    public long getUserId() {
        return _userId;
    }

    public void setUserId(long userId) {
        _userId = userId;
    }

    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    /**
     * @deprecated {@link #isApproved}
     */
    public boolean getApproved() {
        return isApproved();
    }

    public boolean isApproved() {
        if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
            return true;
        } else {
            return false;
        }
    }

    public boolean isDraft() {
        if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
            return true;
        } else {
            return false;
        }
    }

    public boolean isExpired() {
        if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
            return true;
        } else {
            return false;
        }
    }

    public boolean isPending() {
        if (getStatus() == WorkflowConstants.STATUS_PENDING) {
            return true;
        } else {
            return false;
        }
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public Book toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (Book) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        if (_expandoBridge == null) {
            _expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
                    Book.class.getName(), getPrimaryKey());
        }

        return _expandoBridge;
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        getExpandoBridge().setAttributes(serviceContext);
    }

    @Override
    public Object clone() {
        BookImpl bookImpl = new BookImpl();

        bookImpl.setUuid(getUuid());
        bookImpl.setId(getId());
        bookImpl.setName(getName());
        bookImpl.setIsbn(getIsbn());
        bookImpl.setAuthor(getAuthor());
        bookImpl.setSummary(getSummary());
        bookImpl.setStatus(getStatus());
        bookImpl.setStatusByUserId(getStatusByUserId());
        bookImpl.setStatusByUserName(getStatusByUserName());
        bookImpl.setStatusDate(getStatusDate());
        bookImpl.setCompanyId(getCompanyId());
        bookImpl.setGroupId(getGroupId());
        bookImpl.setUserId(getUserId());

        bookImpl.resetOriginalValues();

        return bookImpl;
    }

    public int compareTo(Book book) {
        int value = 0;

        value = getName().compareTo(book.getName());

        if (value != 0) {
            return value;
        }

        value = getAuthor().compareTo(book.getAuthor());

        value = value * -1;

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        Book book = null;

        try {
            book = (Book) obj;
        } catch (ClassCastException cce) {
            return false;
        }

        long primaryKey = book.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        BookModelImpl bookModelImpl = this;

        bookModelImpl._originalUuid = bookModelImpl._uuid;

        bookModelImpl._originalIsbn = bookModelImpl._isbn;

        bookModelImpl._setOriginalIsbn = false;

        bookModelImpl._originalGroupId = bookModelImpl._groupId;

        bookModelImpl._setOriginalGroupId = false;

        bookModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Book> toCacheModel() {
        BookCacheModel bookCacheModel = new BookCacheModel();

        bookCacheModel.uuid = getUuid();

        String uuid = bookCacheModel.uuid;

        if ((uuid != null) && (uuid.length() == 0)) {
            bookCacheModel.uuid = null;
        }

        bookCacheModel.id = getId();

        bookCacheModel.name = getName();

        String name = bookCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            bookCacheModel.name = null;
        }

        bookCacheModel.isbn = getIsbn();

        bookCacheModel.author = getAuthor();

        String author = bookCacheModel.author;

        if ((author != null) && (author.length() == 0)) {
            bookCacheModel.author = null;
        }

        bookCacheModel.summary = getSummary();

        String summary = bookCacheModel.summary;

        if ((summary != null) && (summary.length() == 0)) {
            bookCacheModel.summary = null;
        }

        bookCacheModel.status = getStatus();

        bookCacheModel.statusByUserId = getStatusByUserId();

        bookCacheModel.statusByUserName = getStatusByUserName();

        String statusByUserName = bookCacheModel.statusByUserName;

        if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
            bookCacheModel.statusByUserName = null;
        }

        Date statusDate = getStatusDate();

        if (statusDate != null) {
            bookCacheModel.statusDate = statusDate.getTime();
        } else {
            bookCacheModel.statusDate = Long.MIN_VALUE;
        }

        bookCacheModel.companyId = getCompanyId();

        bookCacheModel.groupId = getGroupId();

        bookCacheModel.userId = getUserId();

        return bookCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(27);

        sb.append("{uuid=");
        sb.append(getUuid());
        sb.append(", id=");
        sb.append(getId());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", isbn=");
        sb.append(getIsbn());
        sb.append(", author=");
        sb.append(getAuthor());
        sb.append(", summary=");
        sb.append(getSummary());
        sb.append(", status=");
        sb.append(getStatus());
        sb.append(", statusByUserId=");
        sb.append(getStatusByUserId());
        sb.append(", statusByUserName=");
        sb.append(getStatusByUserName());
        sb.append(", statusDate=");
        sb.append(getStatusDate());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(43);

        sb.append("<model><model-name>");
        sb.append("com.xtivia.training.servicebuilder.model.Book");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>uuid</column-name><column-value><![CDATA[");
        sb.append(getUuid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>isbn</column-name><column-value><![CDATA[");
        sb.append(getIsbn());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>author</column-name><column-value><![CDATA[");
        sb.append(getAuthor());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>summary</column-name><column-value><![CDATA[");
        sb.append(getSummary());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>status</column-name><column-value><![CDATA[");
        sb.append(getStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
        sb.append(getStatusByUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>statusByUserName</column-name><column-value><![CDATA[");
        sb.append(getStatusByUserName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>statusDate</column-name><column-value><![CDATA[");
        sb.append(getStatusDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
